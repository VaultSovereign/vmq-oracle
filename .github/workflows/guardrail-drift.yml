name: Guardrail Drift
on:
  schedule:
    - cron: '15 * * * *'  # hourly
  workflow_dispatch: {}
  push:
    branches: ["master", "main"]
    paths:
      - "02-qbusiness/guardrails/**"
      - ".github/workflows/guardrail-drift.yml"

jobs:
  drift:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_QB_OIDC_ROLE_ARN }}
          aws-region: eu-west-1

      - name: Detect guardrail drift
        env:
          REGION: eu-west-1
          APP_ID: ${{ secrets.QB_APP_ID }}
          AUDIT_BUCKET: ${{ secrets.QB_EXPORT_BUCKET }}
        run: |
          set -euo pipefail

          # Validate source file exists
          SRC="02-qbusiness/guardrails/topic-controls.json"
          if [ ! -f "$SRC" ]; then
            echo "Guardrail source not found at $SRC" >&2
            exit 1
          fi

          # Fetch remote configuration
          aws qbusiness get-chat-controls-configuration \
            --region "$REGION" --application-id "$APP_ID" \
            > remote.json

          # Sort for comparison
          jq -S . remote.json > remote.sorted.json
          jq -S . "$SRC" > local.sorted.json

          # Compare and upload evidence if drift detected
          if ! diff -u local.sorted.json remote.sorted.json > drift.patch; then
            ts=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
            GIT_SHA=$(git rev-parse HEAD)
            FILE_SHA=$(sha256sum "$SRC" | awk '{print $1}')
            RUN_ID="${{ github.run_id }}"
            RUN_ATTEMPT="${{ github.run_attempt }}"

            # Create metadata JSON
            jq -n \
              --arg ts "$ts" \
              --arg app_id "$APP_ID" \
              --arg git_sha "$GIT_SHA" \
              --arg file_sha "$FILE_SHA" \
              --arg run_id "$RUN_ID" \
              --arg run_attempt "$RUN_ATTEMPT" \
              '{ts: $ts, drift: "guardrail", app_id: $app_id, git_sha: $git_sha, file_sha: $file_sha, run_id: $run_id, run_attempt: $run_attempt}' \
              > guardrail-drift-metadata.json

            echo "üìã EVIDENCE git_sha=$GIT_SHA file_sha=$FILE_SHA run_id=$RUN_ID attempt=$RUN_ATTEMPT"

            # Upload evidence with metadata tags
            aws s3 cp "guardrail-drift-metadata.json" \
              "s3://${AUDIT_BUCKET}/audit/drift/guardrail-drift-${ts}.json" \
              --metadata "app_id=${APP_ID},git_sha=${GIT_SHA},file_sha=${FILE_SHA},run_id=${RUN_ID},run_attempt=${RUN_ATTEMPT}"

            aws s3 cp local.sorted.json \
              "s3://${AUDIT_BUCKET}/audit/drift/guardrail-local-${ts}.json" \
              --metadata "app_id=${APP_ID},git_sha=${GIT_SHA}"

            aws s3 cp remote.sorted.json \
              "s3://${AUDIT_BUCKET}/audit/drift/guardrail-remote-${ts}.json" \
              --metadata "app_id=${APP_ID},git_sha=${GIT_SHA}"

            aws s3 cp drift.patch \
              "s3://${AUDIT_BUCKET}/audit/drift/guardrail-diff-${ts}.patch" \
              --metadata "app_id=${APP_ID},git_sha=${GIT_SHA}"

            echo "‚ùå Guardrail drift detected ‚Äî evidence uploaded to s3://${AUDIT_BUCKET}/audit/drift/"
            exit 1
          fi
          echo "‚úÖ No guardrail drift"
